"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const got_1 = __importDefault(require("got"));
const logger_1 = __importDefault(require("@wdio/logger"));
const log = (0, logger_1.default)('@wdio/testingbot-service');
const jobDataProperties = ['name', 'tags', 'public', 'build', 'extra'];
class TestingBotService {
    constructor(_options, _capabilities, _config) {
        this._options = _options;
        this._capabilities = _capabilities;
        this._config = _config;
        this._failures = 0;
        this._testCnt = 0;
        this._tbUser = this._config.user;
        this._tbSecret = this._config.key;
        this._isServiceEnabled = Boolean(this._tbUser && this._tbSecret);
    }
    before(caps, specs, browser) {
        this._browser = browser;
    }
    /**
     * Before suite
     * @param {Object} suite Suite
    */
    beforeSuite(suite) {
        this._suiteTitle = suite.title;
    }
    /**
     * Before test
     * @param {Object} test Test
    */
    beforeTest(test) {
        if (!this._isServiceEnabled || !this._browser) {
            return;
        }
        /**
         * in jasmine we get Jasmine__TopLevel__Suite as title since service using test
         * framework hooks in order to execute async functions.
         * This tweak allows us to set the real suite name for jasmine jobs.
         */
        /* istanbul ignore if */
        if (this._suiteTitle === 'Jasmine__TopLevel__Suite') {
            this._suiteTitle = test.fullName.slice(0, test.fullName.indexOf(test.title) - 1);
        }
        const context = (
        /**
         * Jasmine
         */
        test.fullName ||
            /**
             * Mocha
             */
            `${test.parent} - ${test.title}`);
        this._browser.execute('tb:test-context=' + context);
    }
    afterSuite(suite) {
        if (Object.prototype.hasOwnProperty.call(suite, 'error')) {
            ++this._failures;
        }
    }
    /**
     * After test
     * @param {Object} test Test
     */
    afterTest(test, context, results) {
        if (!results.passed) {
            ++this._failures;
        }
    }
    /**
     * For CucumberJS
     */
    /**
     * Before feature
     * @param {string} uri
     * @param {Object} feature
     */
    beforeFeature(uri, feature) {
        if (!this._isServiceEnabled || !this._browser) {
            return;
        }
        this._suiteTitle = feature.name;
        this._browser.execute('tb:test-context=Feature: ' + this._suiteTitle);
    }
    /**
     * Before scenario
     * @param {string} uri
     * @param {Object} feature
     * @param {Object} scenario
     */
    beforeScenario(world) {
        if (!this._isServiceEnabled || !this._browser) {
            return;
        }
        const scenarioName = world.pickle.name;
        this._browser.execute('tb:test-context=Scenario: ' + scenarioName);
    }
    /**
     *
     * Runs before a Cucumber Scenario.
     * @param world world object containing information on pickle and test step
     * @param result result object containing
     * @param result.passed   true if scenario has passed
     * @param result.error    error stack if scenario failed
     * @param result.duration duration of scenario in milliseconds
     */
    afterScenario(world, result) {
        // check if scenario has failed
        if (!result.passed) {
            ++this._failures;
        }
    }
    /**
     * Update TestingBot info
     * @return {Promise} Promise with result of updateJob method call
     */
    after(result) {
        var _a;
        if (!this._isServiceEnabled || !this._browser) {
            return;
        }
        let failures = this._failures;
        /**
         * set failures if user has bail option set in which case afterTest and
         * afterSuite aren't executed before after hook
         */
        if (((_a = this._config.mochaOpts) === null || _a === void 0 ? void 0 : _a.bail) && Boolean(result)) {
            failures = 1;
        }
        const status = 'status: ' + (failures > 0 ? 'failing' : 'passing');
        if (!this._browser.isMultiremote) {
            log.info(`Update job with sessionId ${this._browser.sessionId}, ${status}`);
            return this.updateJob(this._browser.sessionId, failures);
        }
        const browser = this._browser;
        return Promise.all(Object.keys(this._capabilities).map((browserName) => {
            log.info(`Update multiremote job for browser "${browserName}" and sessionId ${browser[browserName].sessionId}, ${status}`);
            return this.updateJob(browser[browserName].sessionId, failures, false, browserName);
        }));
    }
    onReload(oldSessionId, newSessionId) {
        if (!this._isServiceEnabled || !this._browser) {
            return;
        }
        const status = 'status: ' + (this._failures > 0 ? 'failing' : 'passing');
        if (!this._browser.isMultiremote) {
            log.info(`Update (reloaded) job with sessionId ${oldSessionId}, ${status}`);
            return this.updateJob(oldSessionId, this._failures, true);
        }
        const browser = this._browser;
        const browserName = browser.instances.filter((browserName) => browser[browserName].sessionId === newSessionId)[0];
        log.info(`Update (reloaded) multiremote job for browser "${browserName}" and sessionId ${oldSessionId}, ${status}`);
        return this.updateJob(oldSessionId, this._failures, true, browserName);
    }
    async updateJob(sessionId, failures, calledOnReload = false, browserName) {
        if (!this._browser) {
            return;
        }
        const json = this.getBody(failures, calledOnReload, browserName);
        this._failures = 0;
        const response = await got_1.default.put(this.getRestUrl(sessionId), {
            json,
            responseType: 'json',
            username: this._tbUser,
            password: this._tbSecret
        });
        return response.body;
    }
    /**
     *
     * @param   {String} sessionId Session id
     * @returns {String}           TestingBot API URL
     */
    getRestUrl(sessionId) {
        return `https://api.testingbot.com/v1/tests/${sessionId}`;
    }
    getBody(failures, calledOnReload = false, browserName) {
        let body = { test: {} };
        /**
         * set default values
         */
        body.test['name'] = this._suiteTitle;
        /**
         * add reload count to title if reload is used
         */
        if ((calledOnReload || this._testCnt) && this._browser) {
            let testCnt = ++this._testCnt;
            if (this._browser.isMultiremote) {
                testCnt = Math.ceil(testCnt / this._browser.instances.length);
            }
            body.test['name'] += ` (${testCnt})`;
        }
        for (let prop of jobDataProperties) {
            if (!this._capabilities[prop]) {
                continue;
            }
            body.test[prop] = this._capabilities[prop];
        }
        if (browserName) {
            body.test['name'] = `${browserName}: ${body.test['name']}`;
        }
        body.test['success'] = failures === 0 ? '1' : '0';
        return body;
    }
}
exports.default = TestingBotService;
